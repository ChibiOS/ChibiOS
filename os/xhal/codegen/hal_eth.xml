<?xml version="1.0" encoding="UTF-8"?>
<module xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="http://www.chibios.org/xml/schema/ccode/modules.xsd"
  name="hal_eth" descr="ETH Driver" check="HAL_USE_ETH == TRUE" editcode="false">
  <brief>ETH Driver macros and structures.</brief>
  <imports>
    <import>hal_cb_driver.xml</import>
  </imports>
  <public>
    <configs>
      <config name="ETH_USE_SYNCHRONIZATION" default="TRUE">
        <brief>Support for thread synchronization API.</brief>
        <assert invalid="($N != FALSE) &amp;&amp; ($N != TRUE)" />
      </config>
      <config name="ETH_USE_EVENTS" default="FALSE">
        <brief>RTOS events on frame sent/received.</brief>
        <assert invalid="($N != FALSE) &amp;&amp; ($N != TRUE)" />
      </config>
      <config name="ETH_USE_CONFIGURATIONS" default="FALSE">
        <brief>Support for ETH user configurations.</brief>
        <note>When enabled the user must provide a variable named
          @p sio_configurations of type @p sio_configurations_t.</note>
        <assert invalid="($N != FALSE) &amp;&amp; ($N != TRUE)" />
      </config>
    </configs>
    <macros>
      <macro name="__eth_getconf">
        <brief>Return a pointer to the configuration structure.</brief>
        <param name="ip">Pointer to the @p hal_sio_driver_c object.</param>
        <return>A pointer to the configuration structure.</return>
        <notapi />
        <implementation><![CDATA[((const hal_eth_config_t *)((ip)->config))]]></implementation>
      </macro>
      <macro name="__eth_getfield">
        <brief>Retrieves a configuration field.</brief>
        <param name="ip">Pointer to the @p hal_sio_driver_c object.</param>
        <param name="field">Configuration field to be retrieved.</param>
        <return>The field value.</return>
        <notapi />
        <implementation><![CDATA[(__eth_getconf(ip)->field)]]></implementation>
      </macro>
    </macros>
    <types>
      <typedef name="etc_receive_handle_t">
        <brief>Type of a receive handle.</brief>
        <basetype ctype="void *" />
      </typedef>
      <typedef name="etc_transmit_handle_t">
        <brief>Type of a transmit handle.</brief>
        <basetype ctype="void *" />
      </typedef>
      <typedef name="hal_eth_driver_c">
        <brief>Type of structure representing a ETH driver.</brief>
        <basetype ctype="struct hal_eth_driver" />
      </typedef>
      <typedef name="hal_eth_config_t">
        <brief>Type of structure representing a ETH configuration.</brief>
        <basetype ctype="struct hal_eth_config" />
      </typedef>
      <verbatim><![CDATA[
/* Inclusion of LLD header.*/
#include "hal_eth_lld.h"]]></verbatim>
      <struct name="hal_eth_config">
        <brief>Driver configuration structure.</brief>
        <note>Implementations may extend this structure to contain more,
          architecture dependent, fields.
        </note>
        <fields>
          <field name="mac_address" ctype="const uint8_t$I*">
            <brief>MAC address to be used or @p NULL for a default.</brief>
          </field>
          <verbatim><![CDATA[
/* End of the mandatory fields.*/
eth_lld_config_fields;]]></verbatim>
          <condition check="defined(ETH_CONFIG_EXT_FIELS)">
            <verbatim><![CDATA[
ETH_CONFIG_EXT_FIELDS]]></verbatim>
          </condition>
        </fields>
      </struct>
      <typedef name="eth_configurations_t">
        <brief>Type of user-provided ETH configurations.</brief>
        <basetype ctype="struct eth_configurations" />
      </typedef>
      <struct name="eth_configurations">
        <brief>Structure representing user-provided ETH configurations.</brief>
        <fields>
          <field name="cfgsnum" ctype="unsigned">
            <brief>Number of configurations in the open array.</brief>
          </field>
          <field name="cfgs" ctype="hal_eth_config_t$I$N[]">
            <brief>User ETH configurations.</brief>
          </field>
        </fields>
      </struct>
      <class type="regular" name="hal_eth_driver" namespace="eth"
        ancestorname="hal_cb_driver" descr="ETH driver">
        <brief>Class of a ETH driver.</brief>
        <fields>
          <condition check="ETH_USE_SYNCHRONIZATION == TRUE">
            <field name="txqueue" ctype="threads_queue_t">
              <brief>Transmit threads queue.</brief>
            </field>
            <field name="rxqueue" ctype="threads_queue_t">
              <brief>Receive threads queue.</brief>
            </field>
          </condition>
          <condition check="ETH_USE_EVENTS == TRUE">
            <field name="es" ctype="event_source_t">
              <brief>ETH driver events source</brief>
            </field>
          </condition>
          <verbatim><![CDATA[
#if defined(ETH_DRIVER_EXT_FIELS)
ETH_DRIVER_EXT_FIELDS
#endif
/* End of the mandatory fields.*/
eth_lld_driver_fields;]]></verbatim>
        </fields>
        <methods>
          <objinit callsuper="true">
            <implementation><![CDATA[
#if ETH_USE_SYNCHRONIZATION == TRUE
osalThreadQueueObjectInit(&self->txqueue);
osalThreadQueueObjectInit(&self->txqueue);
#endif

#if ETH_USE_EVENTS == TRUE
osalEventObjectInit(&self->es);
#endif

/* Optional, user-defined initializer.*/
#if defined(ETH_DRIVER_EXT_INIT_HOOK)
ETH_DRIVER_EXT_INIT_HOOK(self);
#endif]]></implementation>
          </objinit>
          <dispose>
            <implementation><![CDATA[ ]]></implementation>
          </dispose>
          <regular>
            <method name="ethGetReceiveHandleI" ctype="etc_receive_handle_t">
              <brief><![CDATA[Queries for a received frame handle.]]></brief>
              <return><![CDATA[The receive handle.]]></return>
              <retval value="NULL">If a received frame is not available.</retval>
              <iclass />
              <implementation><![CDATA[

osalDbgCheckClassI();

return eth_lld_get_receive_handle(self);]]></implementation>
            </method>
            <method name="ethGetTransmitHandleI" ctype="etc_transmit_handle_t">
              <brief><![CDATA[Queries for a transmit frame handle.]]></brief>
              <return><![CDATA[The transmit handle.]]></return>
              <retval value="NULL">If an empty transmit frame is not available.</retval>
              <iclass />
              <implementation><![CDATA[

osalDbgCheckClassI();

return eth_lld_get_transmit_handle(self);]]></implementation>
            </method>
            <method name="ethReleaseReceiveHandle" ctype="void">
              <brief><![CDATA[Releases a received frame.]]></brief>
              <param name="rxh" ctype="etc_receive_handle_t" dir="in"><![CDATA[Receive handle.]]></param>
              <api />
                <implementation><![CDATA[

eth_lld_release_receive_handle(self, rxh);]]></implementation>
            </method>
            <method name="ethReleaseTransmitHandle" ctype="void">
              <brief><![CDATA[Releases and transmits a frame.]]></brief>
              <param name="txh" ctype="etc_transmit_handle_t" dir="in"><![CDATA[Transmi] handle.]]></param>
              <api />
              <implementation><![CDATA[

eth_lld_release_transmit_handle(self, txh);]]></implementation>
            </method>
            <method name="ethReadReceiveHandle" ctype="size_t">
              <brief><![CDATA[Reads data sequentially from a received frame.]]></brief>
              <param name="rxh" ctype="etc_receive_handle_t" dir="in"><![CDATA[Receive handle.]]></param>
              <param name="bp" ctype="uint8_t *" dir="out"><![CDATA[Received data buffer pointer.]]></param>
              <param name="n" ctype="size_t" dir="in"><![CDATA[Number of bytes to read.]]></param>
              <return><![CDATA[The number of bytes read from the handle buffer,
                               this value can be less than the amount specified in the
                               parameter @p size if there are no more bytes to read.]]></return>
              <api />
              <implementation><![CDATA[

return eth_lld_read_receive_handle(self, rxh, bp, n);]]></implementation>
            </method>
            <method name="ethWriteTransmitHandle" ctype="size_t">
              <brief><![CDATA[Reads data sequentially from a received frame.]]></brief>
              <param name="txh" ctype="etc_transmit_handle_t" dir="in"><![CDATA[Transmit handle.]]></param>
              <param name="bp" ctype="const uint8_t *" dir="in"><![CDATA[Transmit data buffer pointer.]]></param>
              <param name="n" ctype="size_t" dir="in"><![CDATA[Number of bytes to write.]]></param>
              <return><![CDATA[The number of bytes written into the handle buffer
                               this value can be less than the amount specified in the
                               parameter @p size if the maximum frame size is reached.]]></return>
              <api />
              <implementation><![CDATA[

return eth_lld_write_transmit_handle(self, txh, bp, n);]]></implementation>
            </method>
            <method name="ethGetReceiveBufferX" ctype="const uint8_t *">
              <brief><![CDATA[Direct access to the receive handle buffer.]]></brief>
              <param name="rxh" ctype="etc_receive_handle_t" dir="in"><![CDATA[Receive handle.]]></param>
              <param name="sizep" ctype="size_t *" dir="out"><![CDATA[Size of the
                received frame.]]></param>
              <return><![CDATA[Pointer to the received frame buffer or @p NULL if the driver does
                               not support memory-mapped direct access.]]></return>
              <xclass />
              <implementation><![CDATA[

return eth_lld_get_receive_buffer(self, rxh, sizep);]]></implementation>
            </method>
            <method name="ethGetTransmitBufferX" ctype="uint8_t *">
              <brief><![CDATA[Direct access to the transmit handle buffer.]]></brief>
              <param name="txh" ctype="etc_transmit_handle_t" dir="in"><![CDATA[Transmit handle.]]></param>
              <param name="sizep" ctype="size_t *" dir="out"><![CDATA[Maximum size of the
                transmit buffer.]]></param>
              <return><![CDATA[Pointer to the transmit frame buffer or @p NULL if the driver does
                               not support memory-mapped direct access.]]></return>
              <xclass />
              <implementation><![CDATA[

return eth_lld_get_transmit_buffer(self, txh, sizep);]]></implementation>
            </method>
            <method name="ethPollLinkStatus" ctype="bool">
              <brief><![CDATA[Returns the link status.]]></brief>
              <return><![CDATA[The link status,]]></return>
              <retval value="false">If the link is active.</retval>
              <retval value="true">If the link is down.</retval>
              <api />
              <implementation><![CDATA[

osalDbgCheck(self != NULL);
osalDbgAssert(drvGetStateX(self) == HAL_DRV_STATE_ACTIVE, "not active");

return eth_lld_poll_link_status(self);]]></implementation>
            </method>
            <condition check="ETH_USE_SYNCHRONIZATION == TRUE">
              <method name="ethSynchronizeReceive" ctype="msg_t">
                <brief><![CDATA[Synchronizes with frame reception.]]></brief>
                <implementation><![CDATA[
]]></implementation>
              </method>
              <method name="ethSynchronizeTransmit" ctype="msg_t">
                <brief><![CDATA[Synchronizes with frame transmission.]]></brief>
                <implementation><![CDATA[]]></implementation>
              </method>
            </condition>
          </regular>
          <override>
            <method shortname="start">
              <implementation><![CDATA[

return eth_lld_start(self);]]></implementation>
            </method>
            <method shortname="stop">
              <implementation><![CDATA[

eth_lld_stop(self);]]></implementation>
            </method>
            <method shortname="setcfg">
              <implementation><![CDATA[

return (const void *)eth_lld_setcfg(self, (const hal_eth_config_t *)config);]]></implementation>
            </method>
            <method shortname="selcfg">
              <implementation><![CDATA[

return (const void *)eth_lld_selcfg(self, cfgnum);]]></implementation>
            </method>
          </override>
        </methods>
      </class>
    </types>
    <functions>
      <function name="ethInit" ctype="void">
        <brief>ETH Driver initialization.</brief>
        <note><![CDATA[This function is implicitly invoked by @p halInit(),
          there is no need to explicitly initialize the driver.]]></note>
        <init />
        <implementation><![CDATA[

eth_lld_init();]]></implementation>
      </function>
    </functions>
  </public>
  <private>
    <includes_always>
      <include style="regular">hal.h</include>
    </includes_always>
  </private>
</module>
